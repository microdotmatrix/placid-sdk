import { eq } from "drizzle-orm";
import { headers } from "next/headers";
import { redirect } from "next/navigation";
import { cache } from "react";
import { auth } from "../auth";
import { db } from "./index";
import { userUpload, userGeneratedImage } from "./schema";
/**
 * Fetches user uploads from the database
 * @returns Array of user uploads or null if user is not authenticated
 */
export const getUserUploads = cache(async (userId: string) => {
  // Fetch all uploads for this user
  const uploads = await db.query.userUpload.findMany({
    where: eq(userUpload.userId, userId),
    orderBy: (uploads) => uploads.createdAt,
  });

  return uploads;
});

/**
 * Fetches user uploads from the database, redirects to login if not authenticated
 * @param redirectUrl URL to redirect to if user is not authenticated
 * @returns Array of user uploads
 */
export const getUserUploadsOrRedirect = cache(
  async (redirectUrl = "/auth/login") => {
    // Get the current user session
    const session = await auth.api.getSession({ headers: await headers() });

    // If no session exists, redirect to login
    if (!session) {
      redirect(redirectUrl);
    }

    // Get the user ID from the session
    const userId = session.user.id;

    // Fetch all uploads for this user
    const uploads = await db.query.userUpload.findMany({
      where: eq(userUpload.userId, userId),
      orderBy: (uploads) => uploads.createdAt,
    });

    return uploads;
  }
);

/**
 * Fetches epitaph IDs for images generated by a specific user
 * @param userId User ID to fetch epitaph IDs for
 * @returns Array of user generated images with their epitaph IDs
 */
export const getUserGeneratedEpitaphIds = cache(async (userId: string) => {
  // Fetch all generated images for this user
  const generatedImages = await db.query.userGeneratedImage.findMany({
    where: eq(userGeneratedImage.userId, userId),
    orderBy: (images) => images.createdAt,
  });

  // Return the epitaph IDs
  return generatedImages.map(image => image.epitaphId);
});

/**
 * Fetches all user generated images from the database
 * @param userId User ID to fetch generated images for
 * @returns Array of user generated images or empty array if none found
 */
export const getUserGeneratedImages = cache(async (userId: string) => {
  // Fetch all generated images for this user
  const generatedImages = await db.query.userGeneratedImage.findMany({
    where: eq(userGeneratedImage.userId, userId),
    orderBy: (images) => images.createdAt,
  });

  return generatedImages;
});

/**
 * Fetches epitaph IDs for images generated by the current user or redirects to login
 * @param redirectUrl URL to redirect to if user is not authenticated
 * @returns Array of epitaph IDs
 */
export const getUserGeneratedEpitaphIdsOrRedirect = cache(
  async (redirectUrl = "/auth/login") => {
    // Get the current user session
    const session = await auth.api.getSession({ headers: await headers() });

    // If no session exists, redirect to login
    if (!session) {
      redirect(redirectUrl);
    }

    // Get the user ID from the session
    const userId = session.user.id;

    // Fetch all generated images for this user
    const generatedImages = await db.query.userGeneratedImage.findMany({
      where: eq(userGeneratedImage.userId, userId),
      orderBy: (images) => images.createdAt,
    });

    // Return the epitaph IDs
    return generatedImages.map(image => image.epitaphId);
  }
);
